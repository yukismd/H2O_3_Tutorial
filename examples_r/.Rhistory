if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
install.packages("h2o", type="source", repos="http://h2o-release.s3.amazonaws.com/h2o/rel-zorn/4/R")
install.packages("h2o", type="source", repos="http://h2o-release.s3.amazonaws.com/h2o/rel-zorn/4/R")
?install.packages
install.packages("/Users/YShimada-MBP16/Downloads/h2o_3.36.0.4.tar.gz", repos=NULL, type="source")
install.packages("/Users/YShimada-MBP16/Downloads/h2o_3.36.0.4.tar.gz", repos=NULL, type="source")
install.packages("/Users/YShimada-MBP16/Downloads/h2o_3.36.0.4.tar.gz")
library(h2o)
version
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
install.packages("h2o", type="source", repos="http://h2o-release.s3.amazonaws.com/h2o/rel-zorn/4/R")
pwd
library(h2o)
h2o.init()
h2o.shutdown()
library(h2o)
h2o
h2o.shutdown()
h2o.getVersion()
h2o.init()
h2o.getVersion()
frame_CreditCard <- h2o.importFile('https://h2oai-jpn-public.s3.amazonaws.com/sample-data/uci-credit-card/UCI_Credit_Card3.csv')
frame_CreditCard
class(frame_CreditCard)
type(frame_CreditCard)
size(frame_CreditCard)
summary(frame_CreditCard)
h2o.summary(frame_CreditCard)
h2o.head(frame_CreditCard)
head(frame_CreditCard)
frame_CreditCard
View(frame_CreditCard)
View(frame_CreditCard)
frame_CreditCard
shape(frame_CreditCard)
size(frame_CreditCard)
nrow(frame_CreditCard)
ncol(frame_CreditCard)
nrow(frame_CreditCard), ncol(frame_CreditCard)
frame_CreditCard.summary()
split.data.frame()
h2o.splitFrame()
dim
dim(frame_CreditCard)
h2o.splitFrame(frame_CreditCard, ratios = 0.75)
tmp <- h2o.splitFrame(frame_CreditCard, ratios = 0.75)
class(tmp)
tmp[1]
dim(tmp[1])
dim(tmp[[1]])
dim(tmp)
## データ分割
split_frame <- h2o.splitFrame(frame_CreditCard, ratios = 0.75)
frame_train <- split_frame[[1]]
dim(frame_train)
frame_test <- split_frame[[2]]
dim(frame_test)
h2o.gbm()
frame_CreditCard
cols(frame_CreditCard)
names(frame_CreditCard)
names(frame_CreditCard)[-1]
names(frame_CreditCard)[2:]
names(frame_CreditCard)[2:10]
names(frame_CreditCard)[2:ncol(frame_CreditCard)]
names(frame_CreditCard)[2:ncol(frame_CreditCard)-1]
y_col <- 'default_payment_next_month'
X_cols <- names(frame_CreditCard)[2:ncol(frame_CreditCard)-1]
X_cols
c(1,2,3)
c("1","2","3")
h2o.gbm(y=y_col, x=X_colsm, training_frame=frame_train, validation_frame=frame_test)
h2o.gbm(y=y_col, x=X_cols, training_frame=frame_train, validation_frame=frame_test)
mod_gbm <- h2o.gbm(y=y_col, x=X_cols, training_frame=frame_train, validation_frame=frame_test)
as.factor()
summary(frame_CreditCard)
as.factor()
summary(frame_CreditCard)
info(frame_CreditCard)
info(frame_CreditCard)
dty(frame_CreditCard)
data(frame_CreditCard)
str(frame_CreditCard)
frame_CreditCard['default_payment_next_month']
as.factor(frame_CreditCard['default_payment_next_month'])
frame_CreditCard['default_payment_next_month'] <- as.factor(frame_CreditCard['default_payment_next_month'])
str(frame_CreditCard)
## カラムの役割を指定
y_col <- 'default_payment_next_month'
X_cols <- names(frame_CreditCard)[2:ncol(frame_CreditCard)-1]
## データ分割
split_frame <- h2o.splitFrame(frame_CreditCard, ratios = 0.75)
frame_train <- split_frame[[1]]
dim(frame_train)
frame_test <- split_frame[[2]]
dim(frame_test)
## モデル学習（GBM）
mod_gbm <- h2o.gbm(y=y_col, x=X_cols, training_frame=frame_train, validation_frame=frame_test)
mod_gbm
mod_gbm
class(mod_gbm)
mod_gbm[1]
str(mod_gbm)
mod_gbm@parameters
mod_gbm$validation_metrics
mod_gbm@parameters$validation_metrics
mod_gbm@model$validation_metrics
mod_gbm@model
str(mod_gbm@model)
mod_gbm@model$validation_metrics
mod_gbm@parameters
mod_gbm@model$training_metrics
mod_gbm@model$validation_metrics
mod_gbm@model$training_metrics
mod_gbm
mod_gbm@parameters
str(mod_gbm)
mod_gbm@allparameters
mod_gbm@parameters
h2o.varimp()
h2o.varimp(mod_gbm)
h2o.varimp_heatmap(mod_gbm)
h2o.varimp_plot(mod_gbm)
## H2O-3 Clustorの終了
h2o.shutdown()
h2o.varimp(mod_gbm)
h2o.getVersion()
