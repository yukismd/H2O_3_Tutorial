if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
install.packages("h2o", type="source", repos="http://h2o-release.s3.amazonaws.com/h2o/rel-zorn/4/R")
install.packages("h2o", type="source", repos="http://h2o-release.s3.amazonaws.com/h2o/rel-zorn/4/R")
?install.packages
install.packages("/Users/YShimada-MBP16/Downloads/h2o_3.36.0.4.tar.gz", repos=NULL, type="source")
install.packages("/Users/YShimada-MBP16/Downloads/h2o_3.36.0.4.tar.gz", repos=NULL, type="source")
install.packages("/Users/YShimada-MBP16/Downloads/h2o_3.36.0.4.tar.gz")
library(h2o)
version
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
install.packages("h2o", type="source", repos="http://h2o-release.s3.amazonaws.com/h2o/rel-zorn/4/R")
pwd
library(h2o)
h2o.init()
h2o.shutdown()
library(h2o)
h2o
h2o.shutdown()
h2o.getVersion()
h2o.init()
h2o.getVersion()
frame_CreditCard <- h2o.importFile('https://h2oai-jpn-public.s3.amazonaws.com/sample-data/uci-credit-card/UCI_Credit_Card3.csv')
frame_CreditCard
class(frame_CreditCard)
type(frame_CreditCard)
size(frame_CreditCard)
summary(frame_CreditCard)
h2o.summary(frame_CreditCard)
h2o.head(frame_CreditCard)
head(frame_CreditCard)
frame_CreditCard
View(frame_CreditCard)
View(frame_CreditCard)
frame_CreditCard
shape(frame_CreditCard)
size(frame_CreditCard)
nrow(frame_CreditCard)
ncol(frame_CreditCard)
nrow(frame_CreditCard), ncol(frame_CreditCard)
frame_CreditCard.summary()
split.data.frame()
h2o.splitFrame()
dim
dim(frame_CreditCard)
h2o.splitFrame(frame_CreditCard, ratios = 0.75)
tmp <- h2o.splitFrame(frame_CreditCard, ratios = 0.75)
class(tmp)
tmp[1]
dim(tmp[1])
dim(tmp[[1]])
dim(tmp)
## データ分割
split_frame <- h2o.splitFrame(frame_CreditCard, ratios = 0.75)
frame_train <- split_frame[[1]]
dim(frame_train)
frame_test <- split_frame[[2]]
dim(frame_test)
h2o.gbm()
frame_CreditCard
cols(frame_CreditCard)
names(frame_CreditCard)
names(frame_CreditCard)[-1]
names(frame_CreditCard)[2:]
names(frame_CreditCard)[2:10]
names(frame_CreditCard)[2:ncol(frame_CreditCard)]
names(frame_CreditCard)[2:ncol(frame_CreditCard)-1]
y_col <- 'default_payment_next_month'
X_cols <- names(frame_CreditCard)[2:ncol(frame_CreditCard)-1]
X_cols
c(1,2,3)
c("1","2","3")
h2o.gbm(y=y_col, x=X_colsm, training_frame=frame_train, validation_frame=frame_test)
h2o.gbm(y=y_col, x=X_cols, training_frame=frame_train, validation_frame=frame_test)
mod_gbm <- h2o.gbm(y=y_col, x=X_cols, training_frame=frame_train, validation_frame=frame_test)
as.factor()
summary(frame_CreditCard)
as.factor()
summary(frame_CreditCard)
info(frame_CreditCard)
info(frame_CreditCard)
dty(frame_CreditCard)
data(frame_CreditCard)
str(frame_CreditCard)
frame_CreditCard['default_payment_next_month']
as.factor(frame_CreditCard['default_payment_next_month'])
frame_CreditCard['default_payment_next_month'] <- as.factor(frame_CreditCard['default_payment_next_month'])
str(frame_CreditCard)
## カラムの役割を指定
y_col <- 'default_payment_next_month'
X_cols <- names(frame_CreditCard)[2:ncol(frame_CreditCard)-1]
## データ分割
split_frame <- h2o.splitFrame(frame_CreditCard, ratios = 0.75)
frame_train <- split_frame[[1]]
dim(frame_train)
frame_test <- split_frame[[2]]
dim(frame_test)
## モデル学習（GBM）
mod_gbm <- h2o.gbm(y=y_col, x=X_cols, training_frame=frame_train, validation_frame=frame_test)
mod_gbm
mod_gbm
class(mod_gbm)
mod_gbm[1]
str(mod_gbm)
mod_gbm@parameters
mod_gbm$validation_metrics
mod_gbm@parameters$validation_metrics
mod_gbm@model$validation_metrics
mod_gbm@model
str(mod_gbm@model)
mod_gbm@model$validation_metrics
mod_gbm@parameters
mod_gbm@model$training_metrics
mod_gbm@model$validation_metrics
mod_gbm@model$training_metrics
mod_gbm
mod_gbm@parameters
str(mod_gbm)
mod_gbm@allparameters
mod_gbm@parameters
h2o.varimp()
h2o.varimp(mod_gbm)
h2o.varimp_heatmap(mod_gbm)
h2o.varimp_plot(mod_gbm)
## H2O-3 Clustorの終了
h2o.shutdown()
h2o.varimp(mod_gbm)
h2o.getVersion()
library(h2o)
h2o.init()
## h2oライブラリのバージョン
h2o.getVersion()
## データのインポート
frame_CreditCard <- h2o.importFile('https://h2oai-jpn-public.s3.amazonaws.com/sample-data/uci-credit-card/UCI_Credit_Card3.csv')
class(frame_CreditCard)
head(frame_CreditCard)
dim(frame_CreditCard)
summary(frame_CreditCard)
## データ型の確認
str(frame_CreditCard)
frame_CreditCard['default_payment_next_month'] <- as.factor(frame_CreditCard['default_payment_next_month'])
str(frame_CreditCard)
## カラムの役割を指定
y_col <- 'default_payment_next_month'
X_cols <- names(frame_CreditCard)[2:ncol(frame_CreditCard)-1]
X_cols
## データ分割
split_frame <- h2o.splitFrame(frame_CreditCard, ratios = 0.8)
frame_train <- split_frame[[1]]
dim(frame_train)
frame_test <- split_frame[[2]]
dim(frame_test)
## モデル学習（GBM）
mod_gbm <- h2o.gbm(y=y_col, x=X_cols, training_frame=frame_train, validation_frame=frame_test)
mod_gbm
class(mod_gbm)
str(mod_gbm)
mod_gbm@parameters
mod_gbm@allparameters
mod_gbm@model$training_metrics
mod_gbm@model$validation_metrics
h2o.varimp(mod_gbm)
h2o.varimp(mod_gbm)
h2o.varimp_plot(mod_gbm)
X_cols
names(frame_CreditCard)
names(frame_CreditCard)[2:]
names(frame_CreditCard)[2:5]
names(frame_CreditCard)[2:5-1]
names(frame_CreditCard)[2:(5-1)]
## カラムの役割を指定
y_col <- 'default_payment_next_month'
X_cols <- names(frame_CreditCard)[2:(ncol(frame_CreditCard)-1)]
## データ分割
split_frame <- h2o.splitFrame(frame_CreditCard, ratios = 0.8)
frame_train <- split_frame[[1]]
dim(frame_train)
frame_test <- split_frame[[2]]
dim(frame_test)
## モデル学習（GBM）
mod_gbm <- h2o.gbm(y=y_col, x=X_cols, training_frame=frame_train, validation_frame=frame_test)
## 結果の確認
mod_gbm
str(mod_gbm)
# モデルの設定
mod_gbm@parameters
# ハイパーパラメータ
mod_gbm@allparameters
# モデル精度
mod_gbm@model$training_metrics      # 学習データ（training_frameへ指定）に対する結果
mod_gbm@model$validation_metrics    # テストデータ（validation_frameへ指定）にたいする結果
h2o.varimp(mod_gbm)
h2o.varimp_heatmap(mod_gbm)
update.packages("ggplot2")
h2o.varimp_heatmap(mod_gbm)
packageVersion('ggplot2')
package_version("ggplot2")
packageVersion("ggplot2")
packageVersion(ggplot2)
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
packageVersion(ggplot2)
packageVersion("ggplot2")
h2o.varimp_heatmap(mod_gbm)
h2o.varimp(mod_gbm)
h2o.varimp_plot(mod_gbm, num_of_features=15)
h2o.varimp(mod_gbm, top_n=20)
h2o.varimp(mod_gbm, top_n=7)
h2o.varimp(mod_gbm)
class(h2o.varimp(mod_gbm))
h2o.varimp(mod_gbm)
h2o.varimp(mod_gbm)[1:10]
h2o.varimp(mod_gbm)[1:10,]
h2o.varimp(mod_gbm)[1:30,]
h2o.varimp(mod_gbm)[1:20,]
h2o.varimp(mod_gbm)[1:23,]
h2o.varimp(mod_gbm)[1:10,]
explain
h2o.explain
h2o.explain
h2o.explain(mod_gbm)
h2o.explain(mod_gbm, newdata=frame_train)
mli_gbm <- h2o.explain(mod_gbm, newdata=frame_train)
mli_gbm
class(mli_gbm)
str(mli_gbm)
str(mli_gbm)
str(mli_gbm@)
str(mli_gbm$)
mli_gbm$shap_summary()
mli_gbm$shap_summary
mli_gbm$confusion_matrix
mli_gbm$confusion_matrix
mli_gbm$varimp
mli_gbm$shap_summary
mli_gbm$pdp
h2o.explain_row(mod_gbm, newdata=frame_test, row_index=0)
frame_test
h2o.explain_row(mod_gbm, newdata=frame_test, row_index=1)
mli_obs_gbm <- h2o.explain_row(mod_gbm, newdata=frame_test, row_index=1)
mli_obs_gbm
mli_obs_gbm$ice
mli_obs_gbm$shap_explain_row
h2o.predict(mod_gbm, newdata=frame_test)
pred_gbm_test <- h2o.predict(mod_gbm, newdata=frame_test)
pred_gbm_test
dim(pred_gbm_test)
h2o.predict_contributions(mod_gbm, newdata=frame_test)
h2o.download_mojo(mod_gbm, path="../tmp")
dl_name <- h2o.download_mojo(mod_gbm, path="../tmp")
dl_name
"../"+dl_name
paste("../",dl_name)
paste0("../", dl_name)
loaded_model <- h2o.import_mojo(paste0("../", dl_name))
loaded_model <- h2o.import_mojo(paste0("../tmp/", dl_name))
loaded_model
class(loaded_model)
list()
list(1,2,3)
mod_grid <- h2o.grid(algorithm="gbm",
y=y_col, x=X_cols,
training_frame=frame_train, validation_frame=frame_test,
hyper_params=list_hparams)
list_hparams <- list(ntrees=c(40,60), max_depth=c(4,6))
list_hparams
mod_grid <- h2o.grid(algorithm="gbm",
y=y_col, x=X_cols,
training_frame=frame_train, validation_frame=frame_test,
hyper_params=list_hparams)
class(mod_grid)
class(mod_grid)class(mod_grid)
mod_grid
str(mod_grid)
mod_grid@summary_table
mod_grid <- h2o.grid(algorithm="gbm",
y=y_col, x=X_cols,
training_frame=frame_train, validation_frame=frame_test,
hyper_params=list_hparams,
search_criteria=list(stopping_metric="AUC"))
list(stopping_metric="AUC")
mod_grid <- h2o.grid(algorithm="gbm",
y=y_col, x=X_cols,
training_frame=frame_train, validation_frame=frame_test,
hyper_params=list_hparams,
search_criteria=list(stopping_metric="AUTO"))
mod_grid <- h2o.grid(algorithm="gbm",
y=y_col, x=X_cols,
training_frame=frame_train, validation_frame=frame_test,
hyper_params=list_hparams,
search_criteria=list(stopping_metric="auc"))
mod_grid <- h2o.grid(algorithm="gbm",
y=y_col, x=X_cols,
training_frame=frame_train, validation_frame=frame_test,
hyper_params=list_hparams)
class(mod_grid)
str(mod_grid)
mod_grid
mod_grid
mod_grid[1]
mod_grid[[1]]
show(mod_grid)
summary(mod_grid)
summary(mod_gbm)
mod_grid
mod_grid@grid_id
mod_grid
h2o.getGrid(grid_id=mod_grid@grid_id)
h2o.getGrid(grid_id=mod_grid@grid_id, sort_by = "auc")
mod_grid@model_ids
h2o.getModel(mod_grid@model_ids[[1]])
mod_grid
h2o.getModel(mod_grid@model_ids)
mod_grid_1st <- h2o.getModel(mod_grid@model_ids[[1]])
mod_grid_1st
mod_grid_1st
mod_aml <- h2o.automl(y=y_col, x=X_cols,
training_frame=frame_train,
nfolds=3,    # k分割交差検証法を指定。よってvaridation_frameの指定はなし
max_models=3)
class(mod_aml)
str(mod_aml)
str(mod_aml)
mod_aml
names(mod_aml)
h2o.get_leaderboard(mod_aml)
mod_aml
h2o.get_leaderboard(mod_aml, extra_columns='ALL')
lb <- h2o.get_leaderboard(mod_aml, extra_columns='ALL')
lb
class(lb)
h2o.get_leaderboard(mod_aml, extra_columns='ALL')
lb <- h2o.get_leaderboard(mod_aml, extra_columns='ALL')
lb
lb['model_id']
lb['model_id'][1]
h2o.get_automl(lb['model_id'][1])
lb['model_id'][1]
lb['model_id',1]
lb[1,'model_id']
h2o.get_automl(lb[1,'model_id'])
h2o.getModel(lb[1,'model_id'])
h2o.getModel(lb['model_id'][1])
mod_aml_1st <- h2o.getModel(lb[1,'model_id'])
mod_aml_1st
class(mod_aml_1st)
names(mod_aml_1st)
str(mod_aml_1st)
mod_aml_1st@algorithm
mod_aml_1st@parameters
mod_aml_1st@parameters$base_models
mod_aml_1st@parameters$base_models[[1]]
mod_aml_1st@parameters$base_models[[1]][1]
class(mod_aml_1st@parameters$base_models[[1]])
mod_aml_1st@allparameters
mod_aml_1st@model
h2o.coef(mod_aml_1st)
mod_aml_1st@parameters
mod_aml_1st@parameters$metalearner_algorithm
mod_aml_1st@parameters
mod_aml_1st@allparameters
mod_aml_1st@model
mod_aml_1st@model$names
mod_aml_1st@model$base_models
mod_aml_1st@model$stacking_strategy
class(mod_aml_1st)
## H2O-3 Clustorの終了
h2o.shutdown()
